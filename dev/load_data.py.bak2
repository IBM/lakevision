import logging

import pyarrow.parquet as pq
from pyiceberg import catalog
from pyiceberg.schema import Schema
from pyiceberg.types import (
    TimestampType,
    FloatType,
    DoubleType,
    StringType,
    NestedField,
    StructType,
)
from pyiceberg.partitioning import PartitionSpec, PartitionField
from pyiceberg.transforms import DayTransform
from pyiceberg.table.sorting import SortOrder, SortField
from pyiceberg.transforms import IdentityTransform

import fsspec

logging.basicConfig(level=logging.INFO)

fs = fsspec.filesystem("http")

catalog = catalog.load_catalog("default")

data_path = 'https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2023-01.parquet'
df = pq.read_table(data_path, filesystem=fs)

namespace_name = "default"
table_name = f"{namespace_name}.taxi_dataset"

# Create the namespace if it doesn't exist
catalog.create_namespace_if_not_exists(namespace_name)

# Create the table if it doesn't exist
if not catalog.table_exists(table_name):
    table = catalog.create_table(
        table_name,
        schema=df.schema,
    )
    table.append(df)
else:
    # If the table already exists, get a reference to it
    logging.info("Table already exists, no data was loaded to it")

# Scan the table and print the number of rows
scanned_rows = len(table.scan().to_arrow())
logging.info(f"Number of scanned rows: {scanned_rows}")

schema = Schema(
    NestedField(field_id=1, name="datetime", field_type=TimestampType(), required=True),
    NestedField(field_id=2, name="symbol", field_type=StringType(), required=True),
    NestedField(field_id=3, name="bid", field_type=FloatType(), required=False),
    NestedField(field_id=4, name="ask", field_type=DoubleType(), required=False),
    NestedField(
        field_id=5,
        name="details",
        field_type=StructType(
            NestedField(
                field_id=4, name="created_by", field_type=StringType(), required=False
            ),
        ),
        required=False,
    ),
)

partition_spec = PartitionSpec(
    PartitionField(
        source_id=1, field_id=1000, transform=DayTransform(), name="datetime_day"
    )
)

# Sort on the symbol
sort_order = SortOrder(SortField(source_id=2, transform=IdentityTransform()))
table_name2 = f"{namespace_name}.bids"
if not catalog.table_exists(table_name2):
	catalog.create_table(
    	identifier=table_name2,
    	schema=schema,
    	partition_spec=partition_spec,
    	sort_order=sort_order,
	)
